{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.c39d6dcf.map","sourceRoot":"..","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n\n    // interfejsy prefiksujmy I, oraz piszmy z wielkiej litery\n    // typy - bez literki I, tylko wielką literą, mozesz prefixować T jeśli chcesz\n    // klasy z C - spoko, w innych jezykach tak sie pisało \n    // UpperCamelCase dla klas i serwisów\n    // nadawanie typów -> spacja po dwukropku\\\n    // \n\n    type Something = number | string;\n\n    // Zmienne które zajmują się przechowywaniem wartości czasu.\n    let time: number = 0;\n    let seconds: Something = 0;\n    let minutes: number | string = 0;\n    let hours: number | string = 0;\n\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM. \n    const secondEl: HTMLElement = document.querySelector('.second'); // :HTMLElement\n    const minuteEl: HTMLElement = document.querySelector('.minute');\n    const hourEl: HTMLElement = document.querySelector('.hour');\n\n    // Zegar który tyka co 1000ms. \n    const clock = setInterval(() => { \n        // Zwiększanie się ilości czasu.\n        time = time + 1;\n        // Wyliczanie sekund poprzez dzielenie modulo.\n        seconds = time % 60;\n        // Wyliczanie minut poprzez dzielenie modulo.\n        minutes = Math.floor(time / 60) % 60;\n        // Wyliczanie godzin poprzez dzielenie modulo.\n        hours = Math.floor(time / 3600);\n\n        // If - wykona się wtedy gdy ilość sekund będzie mniejsza niż 10.\n        if (seconds < 10) {\n            seconds = `0${seconds}`;\n        };\n        // If - wykona się wtedy gdy ilość minut będzie mniejsza niż 10.\n        if (minutes < 10) {\n            minutes = `0${minutes}`;\n        }; \n        // If - wykona się wtedy gdy ilość godzin będzie mniejsza niż 10.\n        if (hours < 10) {\n            hours = `0${hours}`;\n        }; \n        // Aktualizacja czasu w htmlu.\n        secondEl.innerText = String(seconds);                       //  Jak to obejść? -> explicit coertion -> jawne rzutowanie \n        minuteEl.innerText = String(minutes);\n        hourEl.innerText = String(hours);\n    },1000);\n\n    interface materialsObject {\n        wood: number;\n        stone: number;\n        gold: number;\n    }\n\n    //Ilość surowców.\n    const materials: materialsObject= {\n        wood: 0,\n        stone: 0,\n        gold: 0,\n    };\n\n    //Przychód poszczególnych surowców.\n    const incomeMaterials:materialsObject  = {\n        wood: 1,\n        stone: 1,\n        gold: 1,\n    };\n\n    interface storageCapacity {\n        wood: number;\n        stone: number;\n    }\n\n    // Pojemnośc magazynów.\n    const storageCapacity: storageCapacity  = {\n        wood: 20,\n        stone: 20,\n    };\n\n    // Zmienne, które przechowuje ilość robotników.\n    let worker: number = 5;\n    // Zmienne, które przechowują maksymalną ilość robotników.\n    const maxWorker: number = 10;\n\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM.\n    const woodEl: HTMLElement = document.querySelector('.wood');\n    const stoneEl: HTMLElement = document.querySelector('.stone');\n    const goldEl: HTMLElement = document.querySelector('.gold');\n    const workerEl: HTMLElement = document.querySelector('.worker');\n    const maxWoodEl: HTMLElement = document.querySelector('.max-wood');\n    const maxStoneEl: HTMLElement = document.querySelector('.max-stone');\n\n    // Zwiększanie się ilości drewna i kamienia co 1000ms.\n    const intervalWoodStoneIncome = setInterval(() => {\n        // Zatrzymanie przychodu drewna i kamienia na koniec gry.\n        if (endOfTheGame) {\n            clearInterval(intervalWoodStoneIncome);\n        };\n        // Zwiększenie ilości drewna gdy jest możliwe jego wyprodukowanie.  \n        if (materials.wood < storageCapacity.wood) {\n            materials.wood = materials.wood + incomeMaterials.wood;\n            // Ilość drewna równa jego maksymalnej ilości.\n            if (materials.wood >= storageCapacity.wood) { \n                materials.wood = storageCapacity.wood;\n            };\n            woodEl.innerText = String(materials.wood); \n        }    \n        // Zwiększenie ilości kamienia gdy jest możliwe jego wyprodukowanie.\n        if (materials.stone < storageCapacity.stone) {\n            materials.stone = materials.stone + incomeMaterials.stone;\n            // Ilość kamienia równa jego maksymalnej ilości.\n            if (materials.stone >= storageCapacity.stone) { \n                materials.stone = storageCapacity.stone;\n            }; \n            stoneEl.innerText  = String(materials.stone);\n        };\n    },1000);\n\n    // Zwiększanie ilość złota co 3000ms.\n    const intervalGoldIncome = setInterval(() => { \n        // Zatrzymanie przychodu złota.\n        if (endOfTheGame) {            \n            clearInterval(intervalGoldIncome);\n        };\n        // Zwiększenie się ilości złota.\n        materials.gold = materials.gold + incomeMaterials.gold;\n        goldEl.innerText = String(materials.gold); \n    },3000);\n\n    // Dodawanie określonych bonusów po wybudowaniu budynków.\n    const addBonus:Function = (value:string) => {\n        // Zwiększenie przychodu drewna.\n        if (value === 'woodIncome') {   \n            incomeMaterials.wood += 2;\n        // Zwiększenie przychodu kamienia.   \n        } else if (value === 'stoneIncome') {   \n            incomeMaterials.stone += 2;\n        // Zwiększenie przychodu złota.    \n        } else if (value === 'goldIncome') {   \n            incomeMaterials.gold +=2;\n        // Nowy robotnik.    \n        } else if (value === 'newWorker') {\n            if (worker < maxWorker) {\n                worker += 1;\n                workerEl.innerText = String(worker);\n            };\n        // Powiększenie magazynu drewna.    \n        } else if (value === 'enlargingTheWarehouseWood') {\n            storageCapacity.wood += 10;\n            maxWoodEl.innerText = String(storageCapacity.wood);\n        // Powiększenie magazynu kamienia.    \n        } else if (value === 'enlargingTheWarehouseStone') {\n            storageCapacity.stone += 10;\n            maxStoneEl.innerText = String(storageCapacity.stone);\n        // Zwycięstwo.    \n        } else if (value === 'victory') {\n            victory();\n        };    \n    }; \n\n    // Zmienna, która określa czy licznik budowy jest włączony; domyślnie - false.\n    let setConstructionTimer:boolean = false;\n    // Zmienna, która określa czy skończyła się gra; domyślnie - false.\n    let endOfTheGame:boolean = false;\n\n    // Pobieranie elementu reprezentującego wynik z drzewa DOM. \n    const boardEl= document.querySelector('.board');\n\n    // Fukcja, która wyświetla nowy budynek w htmlu.\n    const construction = (type) => {\n        // Tworzenie nowego diva, który stanie się budynkiem.\n        const newBuilding:HTMLDivElement = document.createElement('div');\n        // Przypisanie mu odpowiednich klas.\n        newBuilding.classList.add(type);\n        newBuilding.classList.add('new-building');\n        // Dodanie budynku do htmla. \n        boardEl.appendChild(newBuilding);\n    };\n\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM. \n    const timerEl: HTMLElement = document.querySelector('.timer');\n    const buildingBoxEl = document.querySelector('.building-box');\n\n    // Wybuduj budynek.\n    const constructionBuilding:Function = (object) => {\n        // Nastąpi rozpoczęcie budowy.\n        if ( materials.wood >= object.wood && materials.stone >= object.stone && materials.gold >= object.gold && setConstructionTimer === false && endOfTheGame === false) {\n            // Włączenie licznika budowy.\n            setConstructionTimer = true;\n            // Pobranie surowców.\n            materials.wood -= object.wood;\n            materials.stone -= object.stone;\n            materials.gold -= object.gold;\n            // Pojawienie się budynku w htmlu.\n            construction(object.name);\n            // Funkcja powoduje pojawienie się licznika budowy w htmlu; aktywuje bonus związany ze zbudowanym budynkiem.\n            constructionOfTheBuilding( timerInProgress(object.time), object.bonus );\n        };\n    };\n\n    // Funkcja, która zwraca czas budowy poszczególnych budynków.\n    const timerInProgress = (time) => {\n        // Zmienna która przechowuje czas budowy.\n        const constructionTime = Math.floor(time / worker);\n        // Pojawienie się komunikatu o czasie budowy w htmlu.\n        timerEl.innerText = `Czas budowy: ${constructionTime}`;  \n        buildingBoxEl.classList.add('opacity-05');\n        // Zwrócenie zmiennej.\n        return constructionTime;\n    };\n\n    // Funkcja, która wyświetla czas budowy budynku w htmlu.\n    const constructionOfTheBuilding:Function = (constructionTime:number,  value:string) => {\n        const contructionInProgress = setInterval(() => {\n            // Zmniejszanie się czasu budowy co 1000ms.\n            constructionTime--;\n            // Aktualizacja czasu budowy w htmlu.\n            timerEl.innerText = `Czas budowy: ${constructionTime}`;\n            // Wyłączenie licznika i aktywacja bonusów za wybudowany budynek.\n            if (constructionTime < 1) {\n                // Zmiana wartości zmiennej na 0, gdyż skończył się czas budowy.\n                constructionTime = 0;\n                setConstructionTimer = false;\n                // Wyczyszczenie htmla.\n                timerEl.innerText = '';\n                buildingBoxEl.classList.remove('opacity-05');\n                buildingBoxEl.classList.add('opacity-1');\n                // Wyłączenie licznika.\n                clearInterval(contructionInProgress);\n                // Wywołanie bonusu jaki się dostaje za wybudowanie budynu. \n                addBonus(value);\n            };\n        },1000);\n    };\n\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM. \n    const winBoxEl = document.querySelector('.win-box');\n    const infoBoxEl  = document.querySelector('.info-box');\n\n    // Funkcja, która informuje gracza o wygraniu gry.\n    const victory:Function = () => {\n        // Zmiana wartości zmiennej, która przechowuje informacje o tym czy gra została wygrana.\n        endOfTheGame = true;\n        // Zatrzymanie czasu.\n        clearInterval(clock);\n        // Wyświetlenie się boxa z napisem 'wygrałeś'.\n        winBoxEl.classList.add('opacity-1');\n        // Dodanie przeźroczystości na poszczególne sekcja planszy.\n        infoBoxEl.classList.add('opacity-05');\n  \n        // Pobieranie elementu reprezentującego wynik z drzewa DOM. \n        const newBuildingEls = document.querySelectorAll('.new-building');     /// <---- co tutaj? Array nie pasuje\n        // Dodanie do każdego elementu stylu poprzez pętle. \n        newBuildingEls.forEach((el) => {\n            el.classList.add('opacity-05');\n        });\n    }\n \n\n    interface building {                               \n        name: string;\n        wood: number;\n        stone: number;\n        gold: number;\n        time: number;\n        bonus: string;\n    }\n\n    type Buildings = building[];\n\n    // Zbiór informacji na temat budynków.                    \n    // const buildings: Buildings  = [{                \n    const buildings: building[]  = [{                    // Czy tutaj powinnam przerobić strukture by podpiąć pod każdy budynek jeden interface? -> nie, wystarczy dodać [] jako ze to tablica\n        name: 'sawmill',                                 // Czy jest jakieś inne rozwiązanie? -> zrobienie nowego typu który ma w sobie []\n        wood: 20,                                        // Czy pisanie js'a w ts'cie różni się jakoś? Prócz nadawania typów itp. Zastanawiam się czy inaczej powinnam podchodzić do kodu\n        stone: 0,                                           \n        gold: 3,\n        time: 120,\n        bonus: 'woodIncome',\n    },{\n        name: 'quarry', \n        wood: 5,\n        stone: 5,\n        gold: 3,\n        time: 120,\n        bonus: 'stoneIncome',\n    },{\n        name: 'gold-mine', \n        wood: 0,\n        stone: 20,\n        gold: 5,\n        time: 200,\n        bonus: 'goldIncome',\n    },{\n        name: 'farm', \n        wood: 6,\n        stone: 0,\n        gold: 0,\n        time: 80,\n        bonus: 'newWorker',\n    },{\n        name: 'castle', \n        wood: 30,\n        stone: 100,\n        gold: 50,\n        time: 300,\n        bonus: 'victory',\n    },{\n        name: 'wood-warehouse', \n        wood: 20,\n        stone: 0,\n        gold: 0,\n        time: 100,\n        bonus: 'enlargingTheWarehouseWood',\n    },{\n        name: 'stone-warehouse', \n        wood: 0,\n        stone: 20,\n        gold: 0,\n        time: 100,\n        bonus: 'enlargingTheWarehouseStone',\n    }];\n\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM.\n    const buttonSawmillEl = document.querySelector('.button-sawmill');\n    const buttonQuarryEl = document.querySelector('.button-quarry');\n    const buttonGoldMineEl = document.querySelector('.button-gold-mine');\n    const buttonFarmEl = document.querySelector('.button-farm');\n    const buttonWoodWarehouseEl = document.querySelector('.button-wood-warehouse');\n    const buttonStoneWarehouseEl = document.querySelector('.button-stone-warehouse');\n    const buttonCastleEl = document.querySelector('.button-castle');\n\n    // Wybuduj TARTAK.  \n    buttonSawmillEl.addEventListener('click', () => {\n        constructionBuilding(buildings[0]);\n    });\n\n    // Wybuduj KAMIENIOŁOM. \n    buttonQuarryEl.addEventListener('click', () =>  {\n        constructionBuilding(buildings[1]);\n    });\n\n    // Wybuduj KOPALNIE ZŁOTA. \n    buttonGoldMineEl.addEventListener('click', () => {\n        constructionBuilding(buildings[2]);\n    });\n\n    // Wybuduj FARME. \n    buttonFarmEl.addEventListener('click', () => {\n        constructionBuilding(buildings[3]);\n    });\n    \n    // Wybuduj ZAMEK. \n    buttonCastleEl.addEventListener('click', () => {\n        constructionBuilding(buildings[4]);\n    }); \n\n    // Wybuduj MAGAZYN DREWNA. \n    buttonWoodWarehouseEl.addEventListener('click', () => {\n        constructionBuilding(buildings[5]);\n    });\n\n    // Wybuduj MAGAZYN KAMIENIA. \n    buttonStoneWarehouseEl.addEventListener('click', () => {\n        constructionBuilding(buildings[6]);\n    });\n\n});\n\n\n\n\n"]}